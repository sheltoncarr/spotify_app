Ideas:

- Add a button that will add a certain recommended song to a user's music library (only if we have extra time)
- add documentations to each function
- Apply for Extended Quota Mode
- For audio features, include loudness, bpm, and duration
- Clean up code + folders + old files
- Test if user name bug is still happening
- Update README.md
- Clean up/update requirements.txt
- getting this warning every time we run app.py: "DeprecationWarning: You're using 'as_dict = True'.get_access_token will return the token string directly in future versions. Please adjust your code accordingly, or use get_cached_token instead.
  auth_manager.get_access_token(request.args.get("code"))"
- Make github repo public once we push the website live
- Summary page (You like {artists}, your favorite year for music is {year}, and your go-to genre is {genre}).
  Your most popular artist is {} and your most niche artist is {})

If we have time: 
- Add hover function over bar charts to display songs/artists represented in the bar

Resources:

authorization examples from spotipy: https://github.com/spotify/web-api-examples
deploying flask app on Elastic Beanstalk (AWS): https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-flask.html
stack overflow - How can I make my application using Spotify API accessible to other users?: https://stackoverflow.com/questions/62311284/how-can-i-make-my-application-using-spotify-api-accessible-to-other-users
flask oauth2 example: https://github.com/spotipy-dev/spotipy/blob/master/examples/app.py
spotipy documentation: https://spotipy.readthedocs.io/en/2.22.1/
spotipy github: https://github.com/spotipy-dev/spotipy#with-user-authentication
spotify design guide: https://developer.spotify.com/documentation/design
extended quota mode: https://developer.spotify.com/blog/2021-05-27-improving-the-developer-and-user-experience-for-third-party-apps
extended quota mode: https://developer.spotify.com/documentation/web-api/concepts/quota-modes
