Ideas:

- fix audio sample button bugs
- Add a button that will add a certain recommended song to a user's music library
- add documentations to each function
- Make visuals for audio analysis section (and maybe top genres/top years sections?)
- Apply for Extended Quota Mode
- Your Data vs About You
- For audio features, include loudness, bpm, and duration
- Edege case for currently playing while spotify dj is on
- fix contact us page
- figure out your data page (playists)
- Clean up code + folders + old files
- Add profile picture to About You page
- Clean up/update requirements.txt
- getting this warning every time we run app.py: "DeprecationWarning: You're using 'as_dict = True'.get_access_token will return the token string directly in future versions. Please adjust your code accordingly, or use get_cached_token instead.
  auth_manager.get_access_token(request.args.get("code"))"

Resources:

authorization examples from spotipy: https://github.com/spotify/web-api-examples
deploying flask app on Elastic Beanstalk (AWS): https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-flask.html
stack overflow - How can I make my application using Spotify API accessible to other users?: https://stackoverflow.com/questions/62311284/how-can-i-make-my-application-using-spotify-api-accessible-to-other-users
flask oauth2 example: https://github.com/spotipy-dev/spotipy/blob/master/examples/app.py
spotipy documentation: https://spotipy.readthedocs.io/en/2.22.1/
spotipy github: https://github.com/spotipy-dev/spotipy#with-user-authentication
spotify design guide: https://developer.spotify.com/documentation/design


